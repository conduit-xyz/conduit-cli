syntax = "proto3";
package api;
option go_package = "xfac/proto/api";

//import "google/protobuf/timestamp.proto";

// Indicates that this message should be displayed to the user via alert/dialog/whatever.
// This is a wrapper object so we can eventually add more information to indicate how the error
// should be displayed (is there a retry button? what method of display? etc) but for now the
// message is sufficient.
message UserFacingError {
    string message = 1;
}

enum TestnetStatus {
    CREATING = 0;
    RUNNING = 1;
    ERRORED = 2;
    DELETING = 3;
}

message Testnet {
    string testnet = 1;
    string name = 2;
    string rpcURL = 3;
    string explorerURL = 4;
    string faucetURL = 5;

    DeploymentType type = 1000;

    repeated Job jobs = 1001;
}

message CreateTestnetOptions {
    string name = 1;

    string forkURL = 2;
    int64 forkBlockNumber = 3;

    int32 chainID = 4;

    int64 blockBaseFeePerGas = 5;
    int64 gasLimit = 6;
    int64 gasPrice = 7;

    string genesisJSON = 8;

    oneof mining {
        int32 blockTime = 100;
        bool noMining = 101;
    }

    double cpuRequests = 9;
    int32 memoryRequestsMB = 10;
    // TODO: disk

    DeploymentType type = 1000;
}

message CreateTestnetRequest {
    string testnet = 1;
    string organization = 2;
    CreateTestnetOptions opts = 3;
    // Only the subset of fields which are not defined in this request need to be
    // filled in here.
    repeated CreateJobRequest jobs = 4;
}

message CreateTestnetResponse {
    Testnet testnet = 1;
}

message ListTestnetsRequest {
    string organization = 1;
}

message ListTestnetsResponse {
    repeated Testnet testnets = 1;
}

message DeleteTestnetRequest {
    string testnet = 1;
    string organization = 2;
}

message GetTestnetRequest {
    string testnet = 1;
    string organization = 2;
}

message GetTestnetResponse {
    Testnet testnet = 1;
}

message DeleteTestnetResponse {}

/*
message StreamTestnetLogsRequest {
    string name = 1;
    google.protobuf.Timestamp sinceTime = 2;
}

message StreamTestnetLogsResponse {
    string logLine = 1;
    google.protobuf.Timestamp time = 2;
}
*/
message Organization {
    string organization = 1;
    string name = 2;
    string owner = 3;
}

message User {
    string user = 1;
    string name = 2;
    string email = 3;
    string imageURL = 4;
}

message LoadUserRequest {}
message LoadUserResponse {
    User user = 1;
    repeated Organization organizations = 2;
}

enum DeploymentType {
    DEPLOYMENTTYPE_ANVIL = 0;
    DEPLOYMENTTYPE_GETH = 1;
    DEPLOYMENTTYPE_ERIGON = 2;
}

message EnvironmentVariable {
    string name = 1;
    string value = 2;
}

message CreateJobTemplateRequest {
    string organization = 1;
    string job_template = 2;
    string repository = 3;
    string prepareCommand = 4;
    string defaultCommand = 5;
    string name = 6;
    string description = 7;
    string imageURL = 8;
}

message CreateJobTemplateResponse {
    JobTemplate template = 1;
}

enum JobTemplateStatusType {
    BUILDING = 0;
    COMPLETED = 1;
    FAILED = 2;
}

message GetJobTemplatesRequest {
    string organization = 1;
}

message JobTemplate {
    string organization = 1;
    string job_template = 2;
    string repository = 3;
    string prepareCommand = 4;
    string defaultCommand = 5;
    string name = 6;
    string description = 7;
    JobTemplateStatusType status = 8;
    double created = 9;
    string imageURL = 10;
}

message GetJobTemplatesResponse {
    repeated JobTemplate templates = 1;
}

message GetJobTemplateStatusRequest {
    string job_template = 1;
    string organization = 2;
}

message GetJobTemplateStatusResponse {
    JobTemplate template = 1;
}

enum JobType {
    OnStart = 0;
    OnEnd = 1;
    OnDemand = 2;
    OnSchedule = 3;
}

message CreateJobRequest {
    string job = 1;
    string organization = 2;
    string job_template = 3;
    string testnet = 4;
    string executeCommand = 5;
    repeated EnvironmentVariable variables = 6;
    string name = 7;
    string description = 8;

    JobType type = 9;
    string schedule = 10; // Only used for JobType.OnSchedule

    bool useDefaultCommand = 11;
}

message CreateJobResponse {
    Job job = 1;
}

message Job {
    string job = 1;
    string organization = 2;
    string job_template = 3;
    string testnet = 4;
    string executeCommand = 5;
    repeated EnvironmentVariable variables = 6;
    string name = 7;
    string description = 8;
    string image_url = 9;

    JobType type = 10;
    string schedule = 11; // Only used for JobType.OnSchedule

    enum Status {
        PENDING = 0;
        RUNNING = 1;
        ERRORED = 2;
        COMPLETED = 3;
    }

    bool deleted = 12;
}

message TriggerOnDemandJobRequest {
    string organization = 1;
    string job = 2;
}

message DeleteJobRequest {
    string organization = 1;
    string job = 2;
}

// TODO: add paging
message GetJobRunsRequest{
    string organization = 1;
    string job = 2;
}

message JobRun {
    string job = 1;
    string run = 2;
    api.Job.Status status = 3;
    double created = 4;

    string name = 7;
    string description = 8;
    string image_url = 9;
}

message GetJobRunsResponse {
    repeated JobRun runs = 1;
}

message GetAllJobRunsRequest{
    string organization = 1;
    string testnet = 2;
}

message GetAllJobRunsResponse {
    repeated JobRun runs = 1;
}

message GetJobRunStatusRequest {
    string job = 1;
    string organization = 2;
    string run = 3;
}

message GetJobRunStatusResponse {
    JobRun run = 1;
}

message APIKey {
    string key = 1;
    double created = 2;
}

message GenerateAPIKeyRequest {
    string organization = 1;
}

message GenerateAPIKeyResponse {
    APIKey key = 1;
}

message DeleteAPIKeyRequest {
    APIKey key = 1;
}

message GetAPIKeysRequest {
    string organization = 1;
}

message GetAPIKeysResponse{
    repeated APIKey keys = 1;
}

message CLIAuthResponse {
    string key = 1;
    double created = 2;
    repeated string organizations = 3;
}

message TriggerOnDemandJobResponse {
}
